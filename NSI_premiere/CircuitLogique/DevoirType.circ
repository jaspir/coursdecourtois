<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="2.7.1" version="1.0">
This file is intended to be loaded by Logisim (http://www.cburch.com/logisim/).
<lib desc="#Wiring" name="0"/>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#Base" name="6">
    <tool name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="6" map="Button2" name="Menu Tool"/>
    <tool lib="6" map="Button3" name="Menu Tool"/>
    <tool lib="6" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="6" name="Poke Tool"/>
    <tool lib="6" name="Edit Tool"/>
    <tool lib="6" name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="tristate" val="false"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </tool>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
  </toolbar>
  <circuit name="main">
    <a name="circuit" val="main"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif plain 12"/>
    <wire from="(280,710)" to="(280,970)"/>
    <wire from="(110,100)" to="(110,420)"/>
    <wire from="(170,100)" to="(170,420)"/>
    <wire from="(80,940)" to="(270,940)"/>
    <wire from="(230,100)" to="(230,420)"/>
    <wire from="(290,100)" to="(290,420)"/>
    <wire from="(260,860)" to="(260,1000)"/>
    <wire from="(230,730)" to="(230,1000)"/>
    <wire from="(130,760)" to="(240,760)"/>
    <wire from="(350,100)" to="(350,120)"/>
    <wire from="(260,710)" to="(260,860)"/>
    <wire from="(230,710)" to="(230,730)"/>
    <wire from="(80,830)" to="(250,830)"/>
    <wire from="(280,970)" to="(280,1000)"/>
    <wire from="(70,270)" to="(360,270)"/>
    <wire from="(80,730)" to="(80,760)"/>
    <wire from="(70,380)" to="(360,380)"/>
    <wire from="(80,830)" to="(80,860)"/>
    <wire from="(80,940)" to="(80,970)"/>
    <wire from="(70,150)" to="(360,150)"/>
    <wire from="(70,190)" to="(360,190)"/>
    <wire from="(70,230)" to="(360,230)"/>
    <wire from="(70,310)" to="(360,310)"/>
    <wire from="(70,350)" to="(360,350)"/>
    <wire from="(270,710)" to="(270,940)"/>
    <wire from="(80,970)" to="(110,970)"/>
    <wire from="(70,120)" to="(350,120)"/>
    <wire from="(350,120)" to="(350,420)"/>
    <wire from="(80,730)" to="(230,730)"/>
    <wire from="(80,760)" to="(100,760)"/>
    <wire from="(80,860)" to="(100,860)"/>
    <wire from="(250,830)" to="(250,1000)"/>
    <wire from="(240,710)" to="(240,760)"/>
    <wire from="(350,120)" to="(360,120)"/>
    <wire from="(240,760)" to="(240,1000)"/>
    <wire from="(140,970)" to="(280,970)"/>
    <wire from="(70,730)" to="(80,730)"/>
    <wire from="(70,830)" to="(80,830)"/>
    <wire from="(70,940)" to="(80,940)"/>
    <wire from="(270,940)" to="(270,1000)"/>
    <wire from="(250,710)" to="(250,830)"/>
    <wire from="(130,860)" to="(260,860)"/>
    <comp lib="6" loc="(212,541)" name="Text">
      <a name="text" val="Forme Normale Disjonctive"/>
    </comp>
    <comp lib="6" loc="(216,461)" name="Text">
      <a name="text" val="Forme normale conjonctive"/>
    </comp>
    <comp lib="0" loc="(70,830)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="B"/>
    </comp>
    <comp lib="6" loc="(142,572)" name="Text">
      <a name="text" val="S="/>
    </comp>
    <comp lib="1" loc="(130,860)" name="NOT Gate"/>
    <comp lib="1" loc="(130,760)" name="NOT Gate"/>
    <comp lib="6" loc="(147,493)" name="Text">
      <a name="text" val="S="/>
    </comp>
    <comp lib="6" loc="(82,109)" name="Text">
      <a name="text" val="valeur"/>
    </comp>
    <comp lib="1" loc="(140,970)" name="NOT Gate"/>
    <comp lib="6" loc="(298,439)" name="Text">
      <a name="text" val="2) Donner la forme normale conjontive de S et sa forme normale disjonctive"/>
    </comp>
    <comp lib="6" loc="(320,103)" name="Text">
      <a name="text" val="S"/>
    </comp>
    <comp lib="6" loc="(259,106)" name="Text">
      <a name="text" val="C"/>
    </comp>
    <comp lib="6" loc="(200,607)" name="Text">
      <a name="text" val="3) Simplifiez la forme normale disjontive"/>
    </comp>
    <comp lib="6" loc="(193,78)" name="Text">
      <a name="text" val="1) remplir le table de vérité de S:"/>
    </comp>
    <comp lib="6" loc="(138,106)" name="Text">
      <a name="text" val="A"/>
    </comp>
    <comp lib="6" loc="(217,683)" name="Text">
      <a name="text" val="4) Construire le circuit qui exprime la fonction S"/>
    </comp>
    <comp lib="6" loc="(141,642)" name="Text">
      <a name="text" val="S="/>
    </comp>
    <comp lib="6" loc="(645,27)" name="Text">
      <a name="text" val="On se donne trois entrées de 1 bit  A, B et C qui représente un nombre écrit en base 2 sous la forme  ABC. L'objectif est de construire le circuit de la fonction S qui renvoie 1 si le nombre est un carré parfait sinon 0."/>
    </comp>
    <comp lib="6" loc="(193,104)" name="Text">
      <a name="text" val="B"/>
    </comp>
    <comp lib="0" loc="(70,730)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="A"/>
    </comp>
    <comp lib="0" loc="(70,940)" name="Pin">
      <a name="tristate" val="false"/>
      <a name="label" val="C"/>
    </comp>
  </circuit>
</project>
